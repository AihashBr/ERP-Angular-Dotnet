using Api.Utilities;
using Microsoft.AspNetCore.Mvc;

namespace Api.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class BalanceControllers : ControllerBase
    {
        public class Input
        {
            public int version { get; set; }
        }

        [HttpPost]
        public IActionResult Post([FromBody] Input input)
        {
            // Código do departamento
            string DD = "1";

            //Tipo de produto
            string T = "";
            // [0] => Venda por peso
            // [1] => Venda por unidade
            // [2] => EAN-13 por peso
            // [3] => Venda por peso glaciado
            // [4] => Venda por peso drenado
            // [5] => EAN-13 por unidade

            // Código do Item
            string CCCCCC = "1";

            // Preço/kg ou Preço/Unid. do item
            string PPPPPP1 = Format.Number(1.12);

            // Dias de validade do produto
            string VVV = "";
            // [000 à 990]
            // [991 à 997]
            // [999] Data introduzida na própria balança , após o PLU.
            // [000 à 360] – Prix4 / Prix4R
            // [000 à 099] - Rede MGVIII

            // Descritivo do Item – Primeira Linha
            string D1 = "Descritivo do Item 1";

            // Descritivo do Item – Segunda Linha
            string D2 = "Descritivo do Item 2";

            // Código da Informação Extra do item
            string RRRRRR = "";
            // "000000" = não haverá associação

            // Código da Imagem do Item
            string FFFF = "";
            // "0000" = não haverá associação

            // Código da Informação Nutricional
            string IIIIII = "";

            // Impressão da Data de Validade
            string DV = "";
            // [1] => Imprime Data de Validade
            // [0] => Não Imprime Data de Validade

            // Impressão da Data de Embalagem
            string DE = "";
            // [1] => Imprime Data de Embalagem
            // [0] => Não Imprime Data de Embalagem

            // Código do Fornecedor
            string CF = "";
            // "0000" = não haverá associação

            // Lote
            string L = "";

            // Código EAN-13 Especial
            string G = "";

            // Versão do preço
            string Z = "";

            // Código do Som
            string CS = "";
            // "0000" = não haverá associação

            // Código de Tara Pré-determinada
            string CT = "";
            // "0000" = não haverá associação
            // Obs.: O código da tara deve respeitar os limites de tara de cada balança

            // Código do Fracionador
            string FR = "";
            // "0000" = não haverá associação

            // Código do Campo Extra 1
            string CE1 = "";
            // "0000" = não haverá associação

            // Código do Campo Extra 2
            string CE2 = "";
            // "0000" = não haverá associação

            // Código da Conservação
            string CON = "";
            // "0000" = não haverá associação

            // EAN-13 de Fornecedor
            string EAN = "";

            // Percentual de Glaciamento
            string GL = "";
            // "000000" = não haverá associação

            // Sequencia de departamentos associados
            string DA = "1";
            // Ex: Para associar departamentos 2 e 5: |0205|

            // Descritivo do Item – Terceira Linha
            string D3 = "";

            // Descritivo do Item – Quarta Linha
            string D4 = "";

            // Código do Campo Extra 3
            string CE3 = "";
            // "000000" = não haverá associação

            // Código do Campo Extra 4
            string CE4 = "";
            // "000000" = não haverá associação

            // Código da mídia (Prix 6 Touch)
            string MIDIA = "";
            // "000000" = não haverá associação

            // Preço Promocional - Preço/kg ou Preço/Unid. do item
            string PPPPPP2 = Format.Number(1.12);

            string SF = "";
            // [0] = Utiliza o fornecedor associado
            // [1] = Balança solicita fornecedor após chamada do PLU

            string FFFFFFFF = "";
            // Código de Fornecedor Associado, de no máximo 4 bytes, utilizado no cadastro de fornecedores do MGV
            // Obs: O código do fornecedor(de 6 bytes) utilizado no padrão RECFOR não pode ser utilizado para esta associação.
            // Ex: Para associar fornecedores 2 e 5: |00020005|

            string ST = "";
            // [0] = Não solicita tara na balança
            // [1] = Solicita Tara na Balança

            // Bequência de balanças onde o item não estará ativo.
            string BNA = "";
            // Ex: Para associar balanças 2 e 5 com itens inativos: |0205|

            // Código EAN-13 Especial
            string G1 = "";
            // Caso seja informado este campo, a opção anterior de envio (G) será ignorada.

            // Percentual de Glaciamento
            string PG = "";
            // Informação que será utilizada apenas para integração com o MGV Cloud.
            // EX: 12,33 = "1233"

            string PPPPPP3 = Format.Number(1.12);

            // Versão 1
            var text = $"{Format.String(DD, 2, '0')}" +
                $"{Format.String(T, 1, '0')}" +
                $"{Format.String(CCCCCC, 6, '0')}" +
                $"{Format.String(PPPPPP1, 6, '0')}" +
                $"{Format.String(VVV, 3, '0')}" +
                $"{Format.String(D1, 25, ' ')}" +
                $"{Format.String(D2, 25, ' ')}" +
                $"{Format.String(RRRRRR, 6, '0')}" +
                $"{Format.String(FFFF, 4, '0')}" +
                $"{Format.String(IIIIII, 6, '0')}" +
                $"{Format.String(DV, 1, '0')}" +
                $"{Format.String(DE, 1, '0')}" +
                $"{Format.String(CF, 4, '0')}" +
                $"{Format.String(L, 12, '0')}" +
                $"{Format.String(G, 11, '0')}";

            // Versão 2
            if (input.version == 1 || input.version == 2 || input.version == 3)
            {
                text += $"{Format.String(Z, 1, '0')}" +
                    $"{Format.String(CS, 4, '0')}" +
                    $"{Format.String(CT, 4, '0')}" +
                    $"{Format.String(FR, 4, '0')}" +
                    $"{Format.String(CE1, 4, '0')}" +
                    $"{Format.String(CE2, 4, '0')}" +
                    $"{Format.String(CON, 4, '0')}" +
                    $"{Format.String(EAN, 12, '0')}" +
                    $"{Format.String(GL, 6, '0')}";
            }

            // Versão 3
            if (input.version == 1 || input.version == 2 || input.version == 3 || input.version == 4)
            {
                text += $"|{Format.String(DA, 2, '0')}|" +
                    $"{Format.String(D3, 35, ' ')}" +
                    $"{Format.String(D4, 35, ' ')}" +
                    $"{Format.String(CE3, 6, '0')}" +
                    $"{Format.String(CE4, 6, '0')}" +
                    $"{Format.String(MIDIA, 6, '0')}" +
                    $"{Format.String(PPPPPP2, 6, '0')}" +
                    $"{Format.String(SF, 1, '0')}" +
                    $"|{Format.String(FFFFFFFF, 0, '0')}|" +
                    $"{Format.String(ST, 1, '0')}" +
                    $"|{Format.String(BNA, 0, '0')}|" +
                    $"{Format.String(G1, 12, '0')}" +
                    $"{Format.String(PG, 4, '0')}";
            }

            // Versão 4
            if (input.version == 1 || input.version == 2 || input.version == 3 || input.version == 4)
            {
                text += $"{Format.String(PPPPPP3, 6, '0')}";
            }

            var fileName = "ITENSMGV.txt";

            return File(System.Text.Encoding.UTF8.GetBytes(text), "text/plain", fileName);
        }
    }
}
